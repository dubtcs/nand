// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */


// 8 RAM8 Chips

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:

    // Use the last 3 bits of address to select RAM8 module
    DMux8Way(in=load,sel=address[3..5],a=use0,b=use1,c=use2,d=use3,e=use4,f=use5,g=use6,h=use7);

    // Send first 3 bits of address to RAM8 modules to select registers
    RAM8(in=in, load=use0, address=address[0..2], out=out0);
    RAM8(in=in, load=use1, address=address[0..2], out=out1);
    RAM8(in=in, load=use2, address=address[0..2], out=out2);
    RAM8(in=in, load=use3, address=address[0..2], out=out3);
    RAM8(in=in, load=use4, address=address[0..2], out=out4);
    RAM8(in=in, load=use5, address=address[0..2], out=out5);
    RAM8(in=in, load=use6, address=address[0..2], out=out6);
    RAM8(in=in, load=use7, address=address[0..2], out=out7);

    // Use last 3 bits again to select which register output to propegate
    Mux8Way16(a=out0,b=out1,c=out2,d=out3,e=out4,f=out5,g=out6,h=out7,sel=address[3..5],out=out);
}