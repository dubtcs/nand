// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // Use the last 3 bits of address to select RAM8 module
    DMux4Way(in=load,sel=address[12..13],a=use0,b=use1,c=use2,d=use3);
    
    // Send first 12 bits of address to RAM64 modules to select registers
    RAM4K(in=in, load=use0, address=address[0..11], out=out0);
    RAM4K(in=in, load=use1, address=address[0..11], out=out1);
    RAM4K(in=in, load=use2, address=address[0..11], out=out2);
    RAM4K(in=in, load=use3, address=address[0..11], out=out3);

    // Use last 3 bits again to select which register output to propegate
    Mux4Way16(a=out0,b=out1,c=out2,d=out3,sel=address[12..13],out=out);
}