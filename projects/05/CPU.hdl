// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

// A Instruction: 0xxxxxxxxxxxxxxx

// C Instruction: 1 11 0 011111 010 111
// Bit 15: Flag as C ins
// Bit 14,13: Ignored
// Bit 12: Modifier, see unit 4.4. a==0 use D/A. a==1 use D/M
// Bit 11-6: Instruction (M+1, M|D, etc...)
// Bit 5-3: Write destination
// Bit 2-0: Jump

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output                  // DONE
        writeM,          // Write to M?                     // DONE
        addressM[15],    // Address in data memory (of M)   // DONE
        pc[15];          // address of next instruction     // DONE

    PARTS:
    
    Mux16(a=instruction,b=outALU,sel=instruction[15],out=mux1); // instruction[0] == 0 means an A instruction, so use it

    And(a=instruction[15],b=instruction[3],out=writeM); // Unit 4.4, 6:24 table     // writeM DONE
    And(a=instruction[15],b=instruction[4],out=writeD);
    And(a=instruction[15],b=instruction[5],out=writeAC); // if C instruction, write to A

    Not(in=instruction[15],out=writeAA); // if A instruction, always write to A
    Or(a=writeAC,b=writeAA,out=writeA);

    ARegister(in=mux1,load=writeA,out=aRegister,out[0..14]=addressM); // addressM DONE

    DRegister(in=outALU,load=writeD,out=dRegister);
    
    Mux16(a=aRegister,b=inM,sel=instruction[12],out=amRegister);
    
    // flags, see Unit 4.4, 5:56
    ALU(x=dRegister,y=amRegister,
        zx=instruction[11],nx=instruction[10],zy=instruction[9],
        ny=instruction[8],f=instruction[7],no=instruction[6],
        out=outALU, out=outM, zr=aluZero, ng=aluNegative);         // outM DONE

    Or(a=aluZero,b=aluNegative,out=zeroBound);
    Not(in=zeroBound,out=aluPositive);

    // Unit 4.4, 7:15
    // Instruction[0] is > 0 jmp field
    // Instruction[1] is == 0 jmp field
    // Instruction[2] is < 0 jmp field

    //And(a=instruction[0],b=aluPositive,out=jumpPositive);   // expects positive and is? Jump
    //And(a=instruction[1],b=aluZero,out=jumpZero);           // expects zero and is? Jump
    //And(a=instruction[2],b=aluNegative,out=jumpNegative);   // expects negative and is? Jump


    // Check if it's a c instruction that has a jump command
    And(a=instruction[0],b=instruction[15],out=jumpCPositive);   // jump c instruction
    And(a=instruction[1],b=instruction[15],out=jumpCZero);       // jump c instruction
    And(a=instruction[2],b=instruction[15],out=jumpCNegative);   // jump c instruction

    // If c instruction with jumps, check conditionals
    And(a=jumpCPositive,b=aluPositive,out=jumpPositive);
    And(a=jumpCZero,b=aluZero,out=jumpZero);
    And(a=jumpCNegative,b=aluNegative,out=jumpNegative);
    
    Or(a=jumpPositive,b=jumpZero,out=jumpPrep);
    Or(a=jumpPrep,b=jumpNegative,out=doJump);

    Not(in=doJump, out=doIncrement); // One or the other
    
    // jumps tho
    PC(in=aRegister, load=doJump, inc=doIncrement, reset=reset, out[0..14]=pc); // pc DONE

}