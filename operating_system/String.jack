// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array mData;
    field int mLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength < 1)
        {
            let maxLength = 1;
        }
        let mData = Array.new(maxLength);
        let mLength = 0;
        return this;
    }

    function int mod(int val, int div)
    {
        var int r;
        let r = (val / div);
        let r = (val - (r * div));
        return r;
    }

    /** Disposes this string. */
    method void dispose() {
        do mData.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return mLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return mData[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let mData[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let mData[mLength] = c;
        let mLength = mLength + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let mLength = mLength - 1;
        let mData[mLength] = 0;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, v, neg;
        var boolean run;
        let run = true;

        if(mData[0] = 45)
        {
            let neg = -1;
            let i = 1; // skip
        }
        else
        {
            let neg = 1;
        }

        while((i < mLength) & (run))
        {
            let v = (v * 10) + (mData[i] - 48);
            let i = i + 1;
        }

        return (neg * v);
    }

    method void setIntRec(int val)
    {
        var int sig;
        if(val < 10)
        {
            do appendChar((val + 48));
            return;
        }
        do setIntRec((val / 10));
        let sig = String.mod(val, 10);
        do appendChar((sig + 48));
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let mLength = 0;
        if(val < 0)
        {
            do appendChar(45); // -
            let val = Math.abs(val);
        }
        do setIntRec(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
