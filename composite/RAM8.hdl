// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Assign yes/no into each toggle pin for each register
    DMux8Way(in=load,sel=address,a=use0,b=use1,c=use2,d=use3,e=use4,f=use5,g=use6,h=use7);
    
    // Register actions
    Register(in=in, load=use0, out=out0);
    Register(in=in, load=use1, out=out1);
    Register(in=in, load=use2, out=out2);
    Register(in=in, load=use3, out=out3);
    Register(in=in, load=use4, out=out4);
    Register(in=in, load=use5, out=out5);
    Register(in=in, load=use6, out=out6);
    Register(in=in, load=use7, out=out7);

    // Select which register to read from
    Mux8Way16(a=out0,b=out1,c=out2,d=out3,e=out4,f=out5,g=out6,h=out7,sel=address,out=out);
    
    // Old
    // I'm thinking too much like a standard code language
    //And(a=address,b=000,out=sel0);
    //Mux(a=false,b=true,out=use0);
    //Register(in=in,load=use0,out=r0);

}